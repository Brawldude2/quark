export type ALL_PROPERTIES = {
	Active: boolean,
	AnchorPoint: Vector2,
	BackgroundColor3: Color3,
	BackgroundTransparency: number,
	BorderColor3: Color3,
	BorderSizePixel: number,
	ClipsDescendants: boolean,
	Draggable: boolean,
	LayoutOrder: number,
	NextSelectionDown: GuiObject,
	NextSelectionLeft: GuiObject,
	NextSelectionRight: GuiObject,
	NextSelectionUp: GuiObject,
	Position: UDim2|Vector3,
	Rotation: number|Vector3,
	Selectable: boolean,
	SelectionImageObject: GuiObject,
	Size: UDim2|Vector3,
	SizeConstraint: Enum.SizeConstraint,
	Visible: boolean,
	ZIndex: number,
	DragBegin: RBXScriptSignal<UDim2>,
	DragStopped: RBXScriptSignal<number, number>,
	InputBegan: RBXScriptSignal<Instance>,
	InputChanged: RBXScriptSignal<Instance>,
	InputEnded: RBXScriptSignal<Instance>,
	MouseEnter: RBXScriptSignal<number, number>,
	MouseLeave: RBXScriptSignal<number, number>,
	MouseMoved: RBXScriptSignal<number, number>,
	MouseWheelBackward: RBXScriptSignal<number, number>,
	MouseWheelForward: RBXScriptSignal<number, number>,
	SelectionGained: RBXScriptSignal<>,
	SelectionLost: RBXScriptSignal<>,
	TouchLongPress: RBXScriptSignal<{any}, Enum.UserInputState>,
	TouchPan: RBXScriptSignal<{any}, Vector2, Vector2, Enum.UserInputState>,
	TouchPinch: RBXScriptSignal<{any}, number, number, Enum.UserInputState>,
	TouchRotate: RBXScriptSignal<{any}, number, number, Enum.UserInputState>,
	TouchSwipe: RBXScriptSignal<Enum.SwipeDirection, number>,
	TouchTap: RBXScriptSignal<{any}>,
	Style: Enum.FrameStyle,
	HoverImage: Content,
	Image: Content,
	ImageColor3: Color3,
	ImageRectOffset: Vector2,
	ImageRectSize: Vector2,
	ImageTransparency: number,
	IsLoaded: boolean,
	PressedImage: Content,
	ScaleType: Enum.ScaleType,
	SliceCenter: Rect,
	SliceScale: number,
	TileSize: UDim2,
	Font: Enum.Font,
	FontSize: Enum.FontSize,
	LineHeight: number,
	Text: string,
	TextBounds: Vector2,
	TextColor3: Color3,
	TextFits: boolean,
	TextScaled: boolean,
	TextSize: number,
	TextStrokeColor3: Color3,
	TextStrokeTransparency: number,
	TextTransparency: number,
	TextTruncate: Enum.TextTruncate,
	TextWrap: boolean,
	TextWrapped: boolean,
	TextXAlignment: Enum.TextXAlignment,
	TextYAlignment: Enum.TextYAlignment,
	AbsoluteWindowSize: Vector2,
	BottomImage: Content,
	CanvasPosition: Vector2,
	CanvasSize: UDim2,
	ElasticBehavior: Enum.ElasticBehavior,
	HorizontalScrollBarInset: Enum.ScrollBarInset,
	MidImage: Content,
	ScrollBarImageColor3: Color3,
	ScrollBarImageTransparency: number,
	ScrollBarThickness: number,
	ScrollingDirection: Enum.ScrollingDirection,
	ScrollingEnabled: boolean,
	TopImage: Content,
	VerticalScrollBarInset: Enum.ScrollBarInset,
	VerticalScrollBarPosition: Enum.VerticalScrollBarPosition,
	ClearTextOnFocus: boolean,
	ManualFocusRelease: boolean,
	MultiLine: boolean,
	OverlayNativeInput: boolean,
	PlaceholderColor3: Color3,
	PlaceholderText: string,
	ShowNativeInput: boolean,
	FocusLost: RBXScriptSignal<boolean, Instance>,
	Focused: RBXScriptSignal<>,
	DisplayOrder: number,
	IgnoreGuiInset: boolean,
	Anchored: boolean,
	BackParamA: number,
	BackParamB: number,
	BackSurface: Enum.SurfaceType,
	BackSurfaceInput: Enum.InputType,
	BottomParamA: number,
	BottomParamB: number,
	BottomSurface: Enum.SurfaceType,
	BottomSurfaceInput: Enum.InputType,
	BrickColor: BrickColor,
	CFrame: CFrame,
	CanCollide: boolean,
	CenterOfMass: Vector3,
	CollisionGroupId: number,
	Color: Color3,
	CustomPhysicalProperties: PhysicalProperties,
	FrontParamA: number,
	FrontParamB: number,
	FrontSurface: Enum.SurfaceType,
	FrontSurfaceInput: Enum.InputType,
	LeftParamA: number,
	LeftParamB: number,
	LeftSurface: Enum.SurfaceType,
	LeftSurfaceInput: Enum.InputType,
	Locked: boolean,
	Material: Enum.Material,
	Orientation: Vector3,
	Reflectance: number,
	ResizeIncrement: number,
	ResizeableFaces: Faces,
	RightParamA: number,
	RightParamB: number,
	RightSurface: Enum.SurfaceType,
	RightSurfaceInput: Enum.InputType,
	RotVelocity: Vector3,
	SpecificGravity: number,
	TopParamA: number,
	TopParamB: number,
	TopSurface: Enum.SurfaceType,
	TopSurfaceInput: Enum.InputType,
	Transparency: number,
	Velocity: Vector3,
	brickColor: BrickColor,
	LocalSimulationTouched: RBXScriptSignal<Instance>,
	OutfitChanged: RBXScriptSignal<>,
	StoppedTouching: RBXScriptSignal<Instance>,
	TouchEnded: RBXScriptSignal<Instance>,
	Touched: RBXScriptSignal<Instance>,
	touched: RBXScriptSignal<Instance>,
	Destroying: RBXScriptSignal<...any>,
}

return 0