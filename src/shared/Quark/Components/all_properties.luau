export type ALL_PROPERTIES<T> = {
	Archivable: boolean?,
	ClassName: string?,
	DataCost: number?,
	Name: string?,
	Parent: Instance?,
	RobloxLocked: boolean?,
	className: string?,
	AncestryChanged: ((self: T, child: Instance, parent: Instance) -> ())?,
	Changed: (
		((self: T, property: string) -> ())
		| ((self: T, value: string) -> ())
		| ((self: T, value: boolean) -> ())
		| ((self: T, value: BrickColor) -> ())
		| ((self: T, value: CFrame) -> ())
		| ((self: T, value: Color3) -> ())
		| ((self: T, value: number) -> ())
		| ((self: T, value: Instance) -> ())
		| ((self: T, value: Ray) -> ())
		| ((self: T, value: Vector3) -> ())
	)?,
	ChildAdded: ((self: T, child: Instance) -> ())?,
	ChildRemoved: ((self: T, child: Instance) -> ())?,
	DescendantAdded: ((self: T, descendant: Instance) -> ())?,
	DescendantRemoving: ((self: T, descendant: Instance) -> ())?,
	childAdded: ((self: T, child: Instance) -> ())?,
	AttachmentForward: Vector3?,
	AttachmentPoint: CFrame?,
	AttachmentPos: Vector3?,
	AttachmentRight: Vector3?,
	AttachmentUp: Vector3?,
	VideoAdClosed: ((self: T, adShown: boolean) -> ())?,
	AnimationId: Content?,
	AnimationPlayed: ((self: T, animationTrack: Instance) -> ())?,
	Animation: Animation?,
	IsPlaying: boolean?,
	Length: number?,
	Looped: boolean?,
	Priority: (Enum.AnimationPriority | number)?,
	Speed: (number | NumberRange)?,
	TimePosition: number?,
	WeightCurrent: number?,
	WeightTarget: number?,
	DidLoop: (((self: T) -> ()) | ((self: T, soundId: string, numOfTimesLooped: number) -> ()))?,
	KeyframeReached: ((self: T, keyframeName: string) -> ())?,
	Stopped: (((self: T) -> ()) | ((self: T, soundId: string) -> ()) | ((self: T, currentPage: Instance) -> ()))?,
	Axis: Vector3?,
	CFrame: CFrame?,
	Orientation: Vector3?,
	Position: (Vector3 | UDim2)?,
	Rotation: (Vector3 | number | NumberRange)?,
	SecondaryAxis: Vector3?,
	Visible: boolean?,
	WorldAxis: Vector3?,
	WorldCFrame: CFrame?,
	WorldOrientation: Vector3?,
	WorldPosition: Vector3?,
	WorldRotation: Vector3?,
	WorldSecondaryAxis: Vector3?,
	BadgeAwarded: ((self: T, message: string, userId: number, badgeId: number) -> ())?,
	SelectionImageObject: GuiObject?,
	Version: number?,
	CurrentScreenOrientation: Enum.ScreenOrientation?,
	ScreenOrientation: Enum.ScreenOrientation?,
	TopbarTransparencyChangedSignal: ((self: T, transparency: number) -> ())?,
	ResetPlayerGuiOnSpawn: boolean?,
	ShowDevelopmentGui: boolean?,
	CoreGuiChangedSignal: ((self: T, coreGuiType: Enum.CoreGuiType, enabled: boolean) -> ())?,
	Attachment0: Attachment?,
	Attachment1: Attachment?,
	Color: (ColorSequence | BrickColor | Color3)?,
	CurveSize0: number?,
	CurveSize1: number?,
	Enabled: boolean?,
	FaceCamera: boolean?,
	LightEmission: number?,
	LightInfluence: number?,
	Segments: number?,
	Texture: Content?,
	TextureLength: number?,
	TextureMode: Enum.TextureMode?,
	TextureSpeed: number?,
	Transparency: (NumberSequence | number)?,
	Width0: number?,
	Width1: number?,
	ZOffset: number?,
	Event: ((self: T, arguments: { any }) -> ())?,
	AngularVelocity: (Vector3 | number)?,
	MaxTorque: (Vector3 | number)?,
	P: number?,
	angularvelocity: Vector3?,
	maxTorque: Vector3?,
	Force: Vector3?,
	force: Vector3?,
	D: number?,
	cframe: CFrame?,
	MaxForce: (Vector3 | number)?,
	maxForce: Vector3?,
	position: Vector3?,
	ReachedTarget: ((self: T) -> ())?,
	Location: Vector3?,
	location: Vector3?,
	Velocity: (Vector3 | number)?,
	velocity: Vector3?,
	CartoonFactor: number?,
	MaxSpeed: number?,
	MaxThrust: number?,
	Target: BasePart?,
	TargetOffset: Vector3?,
	TargetRadius: number?,
	ThrustD: number?,
	ThrustP: number?,
	TurnD: number?,
	TurnP: number?,
	ClickableWhenViewportHidden: boolean?,
	Icon: Content?,
	Click: ((self: T) -> ())?,
	CameraSubject: Instance?,
	CameraType: Enum.CameraType?,
	FieldOfView: number?,
	Focus: CFrame?,
	HeadLocked: boolean?,
	HeadScale: number?,
	NearPlaneZ: number?,
	ViewportSize: Vector2?,
	focus: CFrame?,
	FirstPersonTransition: ((self: T, entering: boolean) -> ())?,
	InterpolationFinished: ((self: T) -> ())?,
	OnRedo: ((self: T, waypoint: string) -> ())?,
	OnUndo: ((self: T, waypoint: string) -> ())?,
	HeadColor: BrickColor?,
	HeadColor3: Color3?,
	LeftArmColor: BrickColor?,
	LeftArmColor3: Color3?,
	LeftLegColor: BrickColor?,
	LeftLegColor3: Color3?,
	RightArmColor: BrickColor?,
	RightArmColor3: Color3?,
	RightLegColor: BrickColor?,
	RightLegColor3: Color3?,
	TorsoColor: BrickColor?,
	TorsoColor3: Color3?,
	BaseTextureId: number?,
	BodyPart: Enum.BodyPart?,
	MeshId: (number | Content)?,
	OverlayTextureId: number?,
	PantsTemplate: Content?,
	ShirtTemplate: Content?,
	Graphic: Content?,
	SkinColor: BrickColor?,
	LoadDefaultChat: boolean?,
	Chatted: (
		((self: T, part: Instance, message: string, color: Enum.ChatColor) -> ())
		| ((self: T, message: string, recipient: Instance) -> ())
	)?,
	CursorIcon: Content?,
	MaxActivationDistance: number?,
	MouseClick: ((self: T, playerWhoClicked: Instance) -> ())?,
	MouseHoverEnter: ((self: T, playerWhoHovered: Instance) -> ())?,
	MouseHoverLeave: ((self: T, playerWhoHovered: Instance) -> ())?,
	RightMouseClick: ((self: T, playerWhoClicked: Instance) -> ())?,
	mouseClick: ((self: T, playerWhoClicked: Instance) -> ())?,
	ItemAdded: ((self: T, instance: Instance) -> ())?,
	ItemRemoved: ((self: T, instance: Instance) -> ())?,
	MaxAngularVelocity: number?,
	PrimaryAxisOnly: boolean?,
	ReactionTorqueEnabled: boolean?,
	Responsiveness: number?,
	RigidityEnabled: boolean?,
	ApplyAtCenterOfMass: boolean?,
	MaxVelocity: number?,
	ReactionForceEnabled: boolean?,
	LimitsEnabled: boolean?,
	Radius: number?,
	Restitution: number?,
	TwistLimitsEnabled: boolean?,
	TwistLowerAngle: number?,
	TwistUpperAngle: number?,
	UpperAngle: number?,
	ActuatorType: Enum.ActuatorType?,
	AngularSpeed: number?,
	CurrentAngle: number?,
	LowerAngle: number?,
	MotorMaxAcceleration: number?,
	MotorMaxTorque: number?,
	ServoMaxTorque: number?,
	TargetAngle: number?,
	InverseSquareLaw: boolean?,
	Magnitude: number?,
	CurrentDistance: number?,
	Thickness: number?,
	CurrentPosition: number?,
	LowerLimit: number?,
	MotorMaxForce: number?,
	ServoMaxForce: number?,
	Size: (number | UDim2 | Vector3 | Vector2 | NumberSequence)?,
	TargetPosition: number?,
	UpperLimit: number?,
	AngularActuatorType: Enum.ActuatorType?,
	AngularLimitsEnabled: boolean?,
	AngularRestitution: number?,
	InclinationAngle: number?,
	MotorMaxAngularAcceleration: number?,
	RotationAxisVisible: boolean?,
	WorldRotationAxis: Vector3?,
	Coils: number?,
	CurrentLength: number?,
	Damping: number?,
	FreeLength: number?,
	MaxLength: number?,
	MinLength: number?,
	Stiffness: number?,
	RelativeTo: Enum.ActuatorRelativeTo?,
	Torque: (Vector3 | number)?,
	BaseUrl: string?,
	RequestQueueSize: number?,
	BoundActionAdded: ((
		self: T,
		actionAdded: string,
		createTouchButton: boolean,
		functionInfoTable: { any },
		isCore: boolean
	) -> ())?,
	BoundActionChanged: ((self: T, actionChanged: string, changeName: string, changeTable: { any }) -> ())?,
	BoundActionRemoved: ((self: T, actionRemoved: string, functionInfoTable: { any }, isCore: boolean) -> ())?,
	GetActionButtonEvent: ((self: T, actionName: string) -> ())?,
	LocalToolEquipped: ((self: T, toolEquipped: Instance) -> ())?,
	LocalToolUnequipped: ((self: T, toolUnequipped: Instance) -> ())?,
	ButtonChanged: ((self: T, button: Enum.Button) -> ())?,
	Steer: number?,
	Throttle: number?,
	AxisChanged: ((self: T, axis: string) -> ())?,
	ReceiverConnected: ((self: T, receiver: Instance) -> ())?,
	ReceiverDisconnected: ((self: T, receiver: Instance) -> ())?,
	Source: (Instance | string)?,
	EventConnected: ((self: T, event: Instance) -> ())?,
	EventDisconnected: ((self: T, event: Instance) -> ())?,
	SourceValueChanged: ((self: T, newValue: number) -> ())?,
	Offset: Vector3?,
	Scale: (Vector3 | number)?,
	VertexColor: Vector3?,
	TextureId: Content?,
	MeshType: Enum.MeshType?,
	AutomaticRetry: boolean?,
	LegacyNamingScheme: boolean?,
	MaxItems: number?,
	DataModel: number?,
	GfxCard: string?,
	InstanceCount: number?,
	IsFmodProfilingEnabled: boolean?,
	IsScriptStackTracingEnabled: boolean?,
	JobCount: number?,
	LuaRamLimit: number?,
	OsIs64Bit: boolean?,
	OsPlatform: string?,
	OsPlatformId: number?,
	OsVer: string?,
	PlayerCount: number?,
	ReportSoundWarnings: boolean?,
	RobloxProductName: string?,
	RobloxVersion: string?,
	SIMD: string?,
	SystemProductName: string?,
	TickCountPreciseOverride: Enum.TickCountSampleMethod?,
	VideoMemory: number?,
	Condition: string?,
	IsEnabled: boolean?,
	Line: number?,
	DebuggingEnabled: boolean?,
	DebuggerAdded: ((self: T, debugger: Instance) -> ())?,
	DebuggerRemoved: ((self: T, debugger: Instance) -> ())?,
	Expression: string?,
	BehaviorType: Enum.DialogBehaviorType?,
	ConversationDistance: number?,
	GoodbyeChoiceActive: boolean?,
	GoodbyeDialog: string?,
	InUse: boolean?,
	InitialPrompt: string?,
	Purpose: Enum.DialogPurpose?,
	Tone: Enum.DialogTone?,
	TriggerDistance: number?,
	TriggerOffset: Vector3?,
	DialogChoiceSelected: ((self: T, player: Instance, dialogChoice: Instance) -> ())?,
	ResponseDialog: string?,
	UserDialog: string?,
	BlastPressure: number?,
	BlastRadius: number?,
	DestroyJointRadiusPercent: number?,
	ExplosionType: Enum.ExplosionType?,
	Hit: (((self: T, part: Instance, distance: number) -> ()) | CFrame)?,
	Face: Enum.NormalId?,
	Color3: Color3?,
	Shiny: number?,
	Specular: number?,
	StudsPerTileU: number?,
	StudsPerTileV: number?,
	FaceId: Enum.NormalId?,
	InOut: Enum.InOut?,
	LeftRight: Enum.LeftRight?,
	TopBottom: Enum.TopBottom?,
	Heat: number?,
	SecondaryColor: Color3?,
	size: number?,
	FriendsUpdated: ((self: T, friendData: { any }) -> ())?,
	Description: string?,
	AdditionalCoreIncludeDirs: string?,
	BubbleChatLifetime: number?,
	BubbleChatMaxBubbles: number?,
	ChatHistory: number?,
	ChatScrollLength: number?,
	CollisionSoundEnabled: boolean?,
	CollisionSoundVolume: number?,
	HardwareMouse: boolean?,
	MaxCollisionSounds: number?,
	OverrideStarterScript: string?,
	ReportAbuseChatHistory: number?,
	SoftwareSound: boolean?,
	VideoCaptureEnabled: boolean?,
	VideoRecordingChangeRequest: ((self: T, recording: boolean) -> ())?,
	AbsolutePosition: Vector2?,
	AbsoluteRotation: number?,
	AbsoluteSize: Vector2?,
	AutoLocalize: boolean?,
	RootLocalizationTable: LocalizationTable?,
	Active: boolean?,
	AnchorPoint: Vector2?,
	BackgroundColor3: Color3?,
	BackgroundTransparency: number?,
	BorderColor3: Color3?,
	BorderSizePixel: number?,
	ClipsDescendants: boolean?,
	Draggable: boolean?,
	LayoutOrder: number?,
	NextSelectionDown: GuiObject?,
	NextSelectionLeft: GuiObject?,
	NextSelectionRight: GuiObject?,
	NextSelectionUp: GuiObject?,
	Selectable: boolean?,
	SizeConstraint: Enum.SizeConstraint?,
	ZIndex: number?,
	DragBegin: ((self: T, initialPosition: UDim2) -> ())?,
	DragStopped: ((self: T, x: number, y: number) -> ())?,
	InputBegan: (((self: T, input: Instance) -> ()) | ((self: T, input: Instance, gameProcessedEvent: boolean) -> ()))?,
	InputChanged: (
		((self: T, input: Instance) -> ()) | ((self: T, input: Instance, gameProcessedEvent: boolean) -> ())
	)?,
	InputEnded: (((self: T, input: Instance) -> ()) | ((self: T, input: Instance, gameProcessedEvent: boolean) -> ()))?,
	MouseEnter: (
		((self: T, x: number, y: number) -> ())
		| ((self: T) -> ())
		| ((self: T, axis: Enum.Axis) -> ())
		| ((self: T, face: Enum.NormalId) -> ())
	)?,
	MouseLeave: (
		((self: T, x: number, y: number) -> ())
		| ((self: T) -> ())
		| ((self: T, axis: Enum.Axis) -> ())
		| ((self: T, face: Enum.NormalId) -> ())
	)?,
	MouseMoved: ((self: T, x: number, y: number) -> ())?,
	MouseWheelBackward: ((self: T, x: number, y: number) -> ())?,
	MouseWheelForward: ((self: T, x: number, y: number) -> ())?,
	SelectionGained: ((self: T) -> ())?,
	SelectionLost: ((self: T) -> ())?,
	TouchLongPress: (((self: T, touchPositions: { any }, state: Enum.UserInputState) -> ()) | ((
		self: T,
		touchPositions: { any },
		state: Enum.UserInputState,
		gameProcessedEvent: boolean
	) -> ()))?,
	TouchPan: (((
		self: T,
		touchPositions: { any },
		totalTranslation: Vector2,
		velocity: Vector2,
		state: Enum.UserInputState
	) -> ()) | ((
		self: T,
		touchPositions: { any },
		totalTranslation: Vector2,
		velocity: Vector2,
		state: Enum.UserInputState,
		gameProcessedEvent: boolean
	) -> ()))?,
	TouchPinch: ((
		(self: T, touchPositions: { any }, scale: number, velocity: number, state: Enum.UserInputState) -> ()
	) | ((
		self: T,
		touchPositions: { any },
		scale: number,
		velocity: number,
		state: Enum.UserInputState,
		gameProcessedEvent: boolean
	) -> ()))?,
	TouchRotate: (((
		self: T,
		touchPositions: { any },
		rotation: number,
		velocity: number,
		state: Enum.UserInputState
	) -> ()) | ((
		self: T,
		touchPositions: { any },
		rotation: number,
		velocity: number,
		state: Enum.UserInputState,
		gameProcessedEvent: boolean
	) -> ()))?,
	TouchSwipe: (((self: T, swipeDirection: Enum.SwipeDirection, numberOfTouches: number) -> ()) | ((
		self: T,
		swipeDirection: Enum.SwipeDirection,
		numberOfTouches: number,
		gameProcessedEvent: boolean
	) -> ()))?,
	TouchTap: (
		((self: T, touchPositions: { any }) -> ())
		| ((self: T, touchPositions: { any }, gameProcessedEvent: boolean) -> ())
	)?,
	Style: (Enum.FrameStyle | Enum.ButtonStyle | Enum.HandlesStyle | Enum.Style)?,
	AutoButtonColor: boolean?,
	Modal: boolean?,
	Selected: (boolean | ((self: T, mouse: Instance) -> ()))?,
	Activated: (((self: T, inputObject: Instance) -> ()) | ((self: T) -> ()))?,
	MouseButton1Click: ((self: T) -> ())?,
	MouseButton1Down: (
		((self: T, x: number, y: number) -> ())
		| ((self: T) -> ())
		| ((self: T, axis: Enum.Axis) -> ())
		| ((self: T, face: Enum.NormalId) -> ())
	)?,
	MouseButton1Up: (
		((self: T, x: number, y: number) -> ())
		| ((self: T) -> ())
		| ((self: T, axis: Enum.Axis) -> ())
		| ((self: T, face: Enum.NormalId) -> ())
	)?,
	MouseButton2Click: ((self: T) -> ())?,
	MouseButton2Down: ((self: T, x: number, y: number) -> ())?,
	MouseButton2Up: ((self: T, x: number, y: number) -> ())?,
	HoverImage: Content?,
	Image: Content?,
	ImageColor3: Color3?,
	ImageRectOffset: Vector2?,
	ImageRectSize: Vector2?,
	ImageTransparency: number?,
	IsLoaded: boolean?,
	PressedImage: Content?,
	ScaleType: Enum.ScaleType?,
	SliceCenter: Rect?,
	SliceScale: number?,
	TileSize: UDim2?,
	Font: Enum.Font?,
	FontSize: Enum.FontSize?,
	LineHeight: number?,
	Text: string?,
	TextBounds: Vector2?,
	TextColor3: Color3?,
	TextFits: boolean?,
	TextScaled: boolean?,
	TextSize: number?,
	TextStrokeColor3: Color3?,
	TextStrokeTransparency: number?,
	TextTransparency: number?,
	TextTruncate: Enum.TextTruncate?,
	TextWrap: boolean?,
	TextWrapped: boolean?,
	TextXAlignment: Enum.TextXAlignment?,
	TextYAlignment: Enum.TextYAlignment?,
	AbsoluteWindowSize: Vector2?,
	BottomImage: Content?,
	CanvasPosition: Vector2?,
	CanvasSize: (UDim2 | Vector2)?,
	ElasticBehavior: Enum.ElasticBehavior?,
	HorizontalScrollBarInset: Enum.ScrollBarInset?,
	MidImage: Content?,
	ScrollBarImageColor3: Color3?,
	ScrollBarImageTransparency: number?,
	ScrollBarThickness: number?,
	ScrollingDirection: Enum.ScrollingDirection?,
	ScrollingEnabled: boolean?,
	TopImage: Content?,
	VerticalScrollBarInset: Enum.ScrollBarInset?,
	VerticalScrollBarPosition: Enum.VerticalScrollBarPosition?,
	ClearTextOnFocus: boolean?,
	ManualFocusRelease: boolean?,
	MultiLine: boolean?,
	OverlayNativeInput: boolean?,
	PlaceholderColor3: Color3?,
	PlaceholderText: string?,
	ShowNativeInput: boolean?,
	FocusLost: ((self: T, enterPressed: boolean, inputThatCausedFocusLoss: Instance) -> ())?,
	Focused: ((self: T) -> ())?,
	ResetOnSpawn: boolean?,
	ZIndexBehavior: Enum.ZIndexBehavior?,
	Adornee: (Instance | PVInstance | BasePart)?,
	AlwaysOnTop: boolean?,
	ExtentsOffset: Vector3?,
	ExtentsOffsetWorldSpace: Vector3?,
	MaxDistance: number?,
	PlayerToHideFrom: Instance?,
	SizeOffset: Vector2?,
	StudsOffset: Vector3?,
	StudsOffsetWorldSpace: Vector3?,
	Title: string?,
	PluginDragDropped: ((self: T, pluginDragEvent: Instance) -> ())?,
	PluginDragEntered: ((self: T, pluginDragEvent: Instance) -> ())?,
	PluginDragLeft: ((self: T, pluginDragEvent: Instance) -> ())?,
	PluginDragMoved: ((self: T, pluginDragEvent: Instance) -> ())?,
	WindowFocusReleased: ((self: T) -> ())?,
	WindowFocused: ((self: T) -> ())?,
	HostWidgetWasRestored: boolean?,
	DisplayOrder: number?,
	IgnoreGuiInset: boolean?,
	ToolPunchThroughDistance: number?,
	CycleOffset: number?,
	From: BasePart?,
	StudsBetweenTextures: number?,
	TextureSize: Vector2?,
	To: BasePart?,
	WireRadius: number?,
	SizeRelativeOffset: Vector3?,
	Height: number?,
	A: number?,
	B: number?,
	C: number?,
	Range: number?,
	LineThickness: number?,
	SurfaceColor3: Color3?,
	SurfaceTransparency: number?,
	Axes: Axes?,
	MouseDrag: (
		((self: T, axis: Enum.Axis, relativeAngle: number, deltaRadius: number) -> ())
		| ((self: T, face: Enum.NormalId, distance: number) -> ())
	)?,
	Faces: Faces?,
	TargetSurface: Enum.NormalId?,
	Humanoid: Humanoid?,
	Part: BasePart?,
	Point: Vector3?,
	BinType: Enum.BinType?,
	Deselected: ((self: T) -> ())?,
	CanBeDropped: boolean?,
	Grip: CFrame?,
	GripForward: Vector3?,
	GripPos: Vector3?,
	GripRight: Vector3?,
	GripUp: Vector3?,
	ManualActivationOnly: boolean?,
	RequiresHandle: boolean?,
	ToolTip: string?,
	Deactivated: ((self: T) -> ())?,
	Equipped: (
		((self: T, mouse: Instance) -> ()) | ((self: T, humanoid: Instance, skateboardController: Instance) -> ())
	)?,
	Unequipped: (((self: T) -> ()) | ((self: T, humanoid: Instance) -> ()))?,
	TeamColor: BrickColor?,
	AutoSelectGuiEnabled: boolean?,
	CoreGuiNavigationEnabled: boolean?,
	GuiNavigationEnabled: boolean?,
	IsModalDialog: boolean?,
	IsWindows: boolean?,
	MenuIsOpen: boolean?,
	SelectedCoreObject: GuiObject?,
	SelectedObject: GuiObject?,
	BrowserWindowClosed: ((self: T) -> ())?,
	ErrorMessageChanged: ((self: T, newErrorMessage: string) -> ())?,
	KeyPressed: ((self: T, key: string, modifiers: string) -> ())?,
	MenuClosed: ((self: T) -> ())?,
	MenuOpened: ((self: T) -> ())?,
	SafeZoneOffsetsChanged: ((self: T) -> ())?,
	ShowLeaveConfirmation: ((self: T) -> ())?,
	SpecialKeyPressed: ((self: T, key: Enum.SpecialKey, modifiers: string) -> ())?,
	UiMessageChanged: ((self: T, msgType: Enum.UiMessageType, newUiMessage: string) -> ())?,
	HttpEnabled: boolean?,
	AutoJumpEnabled: boolean?,
	AutoRotate: boolean?,
	AutomaticScalingEnabled: boolean?,
	CameraOffset: Vector3?,
	DisplayDistanceType: Enum.HumanoidDisplayDistanceType?,
	FloorMaterial: Enum.Material?,
	Health: number?,
	HealthDisplayDistance: number?,
	HealthDisplayType: Enum.HumanoidHealthDisplayType?,
	HipHeight: number?,
	Jump: boolean?,
	JumpPower: number?,
	MaxHealth: number?,
	MaxSlopeAngle: number?,
	MoveDirection: Vector3?,
	NameDisplayDistance: number?,
	NameOcclusion: Enum.NameOcclusion?,
	PlatformStand: boolean?,
	RigType: Enum.HumanoidRigType?,
	RootPart: BasePart?,
	SeatPart: BasePart?,
	Sit: boolean?,
	TargetPoint: Vector3?,
	WalkSpeed: number?,
	WalkToPart: BasePart?,
	WalkToPoint: Vector3?,
	maxHealth: number?,
	Climbing: ((self: T, speed: number) -> ())?,
	CustomStatusAdded: ((self: T, status: string) -> ())?,
	CustomStatusRemoved: ((self: T, status: string) -> ())?,
	Died: ((self: T) -> ())?,
	FallingDown: ((self: T, active: boolean) -> ())?,
	FreeFalling: ((self: T, active: boolean) -> ())?,
	GettingUp: ((self: T, active: boolean) -> ())?,
	HealthChanged: ((self: T, health: number) -> ())?,
	Jumping: ((self: T, active: boolean) -> ())?,
	MoveToFinished: ((self: T, reached: boolean) -> ())?,
	PlatformStanding: ((self: T, active: boolean) -> ())?,
	Ragdoll: ((self: T, active: boolean) -> ())?,
	Running: ((self: T, speed: number) -> ())?,
	Seated: ((self: T, active: boolean, currentSeatPart: Instance) -> ())?,
	StateChanged: ((self: T, old: Enum.HumanoidStateType, new: Enum.HumanoidStateType) -> ())?,
	StateEnabledChanged: ((self: T, state: Enum.HumanoidStateType, isEnabled: boolean) -> ())?,
	StatusAdded: ((self: T, status: Enum.Status) -> ())?,
	StatusRemoved: ((self: T, status: Enum.Status) -> ())?,
	Strafing: ((self: T, active: boolean) -> ())?,
	Swimming: ((self: T, speed: number) -> ())?,
	Touched: (
		((self: T, touchingPart: Instance, humanoidPart: Instance) -> ()) | ((self: T, otherPart: Instance) -> ())
	)?,
	Delta: Vector3?,
	KeyCode: Enum.KeyCode?,
	UserInputState: Enum.UserInputState?,
	UserInputType: Enum.UserInputType?,
	AllowInsertFreeModels: boolean?,
	C0: CFrame?,
	C1: CFrame?,
	Part0: BasePart?,
	Part1: BasePart?,
	BaseAngle: number?,
	F0: Vector3?,
	F1: Vector3?,
	F2: Vector3?,
	F3: Vector3?,
	DesiredAngle: number?,
	Hole: Hole?,
	Time: number?,
	Loop: boolean?,
	Brightness: number?,
	Shadows: boolean?,
	Angle: number?,
	Ambient: Color3?,
	ClockTime: number?,
	ColorShift_Bottom: Color3?,
	ColorShift_Top: Color3?,
	ExposureCompensation: number?,
	FogColor: Color3?,
	FogEnd: number?,
	FogStart: number?,
	GeographicLatitude: number?,
	GlobalShadows: boolean?,
	OutdoorAmbient: Color3?,
	Outlines: boolean?,
	ShadowColor: Color3?,
	TimeOfDay: string?,
	LightingChanged: ((self: T, skyboxChanged: boolean) -> ())?,
	ForcePlayModeGameLocaleId: string?,
	ForcePlayModeRobloxLocaleId: string?,
	RobloxForcePlayModeGameLocaleId: string?,
	RobloxForcePlayModeRobloxLocaleId: string?,
	RobloxLocaleId: string?,
	SystemLocaleId: string?,
	AutoTranslateWillRun: ((self: T) -> ())?,
	SourceLocaleId: string?,
	HttpResultOut: ((self: T, httpResult: { any }) -> ())?,
	MessageOut: ((self: T, message: string, messageType: Enum.MessageType) -> ())?,
	OnHttpResultApproved: ((self: T, isApproved: boolean) -> ())?,
	ServerHttpResultOut: ((self: T, httpResult: { any }) -> ())?,
	ServerMessageOut: ((self: T, message: string, messageType: Enum.MessageType, timestamp: number) -> ())?,
	LoginFailed: ((self: T, loginError: string) -> ())?,
	LoginSucceeded: ((self: T, username: string) -> ())?,
	AreScriptStartsReported: boolean?,
	DefaultWaitTime: number?,
	GcFrequency: number?,
	GcLimit: number?,
	GcPause: number?,
	GcStepMul: number?,
	WaitingThreadsBudget: number?,
	Disabled: boolean?,
	LinkedSource: Content?,
	ClientLuaDialogRequested: ((self: T, arguments: { any }) -> ())?,
	ClientPurchaseSuccess: ((self: T, ticket: string, playerId: number, productId: number) -> ())?,
	NativePurchaseFinished: ((self: T, player: Instance, productId: string, wasPurchased: boolean) -> ())?,
	PromptGamePassPurchaseFinished: ((self: T, player: Instance, gamePassId: number, wasPurchased: boolean) -> ())?,
	PromptGamePassPurchaseRequested: ((self: T, player: Instance, gamePassId: number) -> ())?,
	PromptProductPurchaseFinished: ((self: T, userId: number, productId: number, isPurchased: boolean) -> ())?,
	PromptProductPurchaseRequested: ((
		self: T,
		player: Instance,
		productId: number,
		equipIfPurchased: boolean,
		currencyType: Enum.CurrencyType
	) -> ())?,
	PromptPurchaseFinished: ((self: T, player: Instance, assetId: number, isPurchased: boolean) -> ())?,
	PromptPurchaseRequested: ((
		self: T,
		player: Instance,
		assetId: number,
		equipIfPurchased: boolean,
		currencyType: Enum.CurrencyType
	) -> ())?,
	ServerPurchaseVerification: ((self: T, serverResponseTable: { any }) -> ())?,
	ThirdPartyPurchaseFinished: ((
		self: T,
		player: Instance,
		productId: string,
		receipt: string,
		wasPurchased: boolean
	) -> ())?,
	Origin: CFrame?,
	TargetFilter: Instance?,
	UnitRay: Ray?,
	ViewSizeX: number?,
	ViewSizeY: number?,
	X: number?,
	Y: number?,
	target: BasePart?,
	Button1Down: ((self: T) -> ())?,
	Button1Up: ((self: T) -> ())?,
	Button2Down: ((self: T) -> ())?,
	Button2Up: ((self: T) -> ())?,
	Idle: ((self: T) -> ())?,
	KeyDown: ((self: T, key: string) -> ())?,
	KeyUp: ((self: T, key: string) -> ())?,
	Move: ((self: T) -> ())?,
	WheelBackward: ((self: T) -> ())?,
	WheelForward: ((self: T) -> ())?,
	keyDown: ((self: T, key: string) -> ())?,
	DragEnter: ((self: T, instances: { Object }) -> ())?,
	Received: ((self: T) -> ())?,
	Ticket: string?,
	ConnectionAccepted: ((self: T, peer: string, replicator: Instance) -> ())?,
	ConnectionFailed: ((self: T, peer: string, code: number, reason: string) -> ())?,
	ConnectionRejected: ((self: T, peer: string) -> ())?,
	Port: number?,
	StatsReceived: ((self: T, stats: { any }) -> ())?,
	ArePhysicsRejectionsReported: boolean?,
	ClientPhysicsSendRate: number?,
	DataGCRate: number?,
	DataMtuAdjust: number?,
	DataSendRate: number?,
	IncommingReplicationLag: number?,
	IsQueueErrorComputed: boolean?,
	NetworkOwnerRate: number?,
	PhysicsMtuAdjust: number?,
	PhysicsSendRate: number?,
	PreferredClientPort: number?,
	PrintBits: boolean?,
	PrintEvents: boolean?,
	PrintFilters: boolean?,
	PrintInstances: boolean?,
	PrintPhysicsErrors: boolean?,
	PrintProperties: boolean?,
	PrintSplitMessage: boolean?,
	PrintStreamInstanceQuota: boolean?,
	PrintTouches: boolean?,
	ReceiveRate: number?,
	RenderStreamedRegions: boolean?,
	ShowActiveAnimationAsset: boolean?,
	TouchSendRate: number?,
	TrackDataTypes: boolean?,
	TrackPhysicsDetails: boolean?,
	UseInstancePacketCache: boolean?,
	UsePhysicsPacketCache: boolean?,
	IsLuaChatEnabled: boolean?,
	IsLuaGamesPageEnabled: boolean?,
	IsLuaHomePageEnabled: boolean?,
	RobloxConnectionChanged: ((
		self: T,
		connectionName: string,
		connectionState: Enum.ConnectionState,
		sequenceNumber: string
	) -> ())?,
	RobloxEventReceived: ((self: T, eventData: { any }) -> ())?,
	Anchored: boolean?,
	BackParamA: number?,
	BackParamB: number?,
	BackSurface: Enum.SurfaceType?,
	BackSurfaceInput: Enum.InputType?,
	BottomParamA: number?,
	BottomParamB: number?,
	BottomSurface: Enum.SurfaceType?,
	BottomSurfaceInput: Enum.InputType?,
	BrickColor: BrickColor?,
	CanCollide: boolean?,
	CenterOfMass: Vector3?,
	CollisionGroupId: number?,
	CustomPhysicalProperties: PhysicalProperties?,
	FrontParamA: number?,
	FrontParamB: number?,
	FrontSurface: Enum.SurfaceType?,
	FrontSurfaceInput: Enum.InputType?,
	LeftParamA: number?,
	LeftParamB: number?,
	LeftSurface: Enum.SurfaceType?,
	LeftSurfaceInput: Enum.InputType?,
	Locked: boolean?,
	Material: Enum.Material?,
	Reflectance: number?,
	ResizeIncrement: number?,
	ResizeableFaces: Faces?,
	RightParamA: number?,
	RightParamB: number?,
	RightSurface: Enum.SurfaceType?,
	RightSurfaceInput: Enum.InputType?,
	RotVelocity: Vector3?,
	SpecificGravity: number?,
	TopParamA: number?,
	TopParamB: number?,
	TopSurface: Enum.SurfaceType?,
	TopSurfaceInput: Enum.InputType?,
	brickColor: BrickColor?,
	LocalSimulationTouched: ((self: T, part: Instance) -> ())?,
	OutfitChanged: ((self: T) -> ())?,
	StoppedTouching: ((self: T, otherPart: Instance) -> ())?,
	TouchEnded: (
		((self: T, otherPart: Instance) -> ()) | ((self: T, touch: Instance, gameProcessedEvent: boolean) -> ())
	)?,
	touched: ((self: T, otherPart: Instance) -> ())?,
	FormFactor: Enum.FormFactor?,
	Shape: Enum.PartType?,
	FlagCaptured: ((self: T, player: Instance) -> ())?,
	Occupant: Humanoid?,
	Controller: SkateboardController?,
	ControllingHumanoid: Humanoid?,
	StickyWheels: boolean?,
	MoveStateChanged: ((self: T, newState: Enum.MoveState, oldState: Enum.MoveState) -> ())?,
	equipped: ((self: T, humanoid: Instance, skateboardController: Instance) -> ())?,
	unequipped: ((self: T, humanoid: Instance) -> ())?,
	AllowTeamChangeOnTouch: boolean?,
	Duration: number?,
	Neutral: boolean?,
	TextureID: Content?,
	TriangleCount: number?,
	UsePartColor: boolean?,
	IsSmooth: boolean?,
	MaxExtents: Region3int16?,
	WaterColor: Color3?,
	WaterReflectance: number?,
	WaterTransparency: number?,
	WaterWaveSize: number?,
	WaterWaveSpeed: number?,
	AreHingesDetected: number?,
	HeadsUpDisplay: boolean?,
	SteerFloat: number?,
	ThrottleFloat: number?,
	TurnSpeed: number?,
	PrimaryPart: BasePart?,
	AllowThirdPartySales: boolean?,
	CurrentCamera: Camera?,
	DistributedGameTime: number?,
	FallenPartsDestroyHeight: number?,
	FilteringEnabled: boolean?,
	Gravity: number?,
	StreamingEnabled: boolean?,
	TemporaryLegacyPhysicsSolverOverride: boolean?,
	Terrain: Instance?,
	PhysicsAnalyzerIssuesFound: ((self: T, count: number) -> ())?,
	PackageId: Content?,
	VersionNumber: number?,
	IsFinished: boolean?,
	Acceleration: Vector3?,
	Drag: number?,
	EmissionDirection: Enum.NormalId?,
	Lifetime: (NumberRange | number)?,
	LockedToPart: boolean?,
	Rate: number?,
	RotSpeed: NumberRange?,
	SpreadAngle: Vector2?,
	VelocityInheritance: number?,
	VelocitySpread: number?,
	Status: Enum.PathStatus?,
	EmptyCutoff: number?,
	AllowSleep: boolean?,
	AreAnchorsShown: boolean?,
	AreAssembliesShown: boolean?,
	AreAwakePartsHighlighted: boolean?,
	AreBodyTypesShown: boolean?,
	AreContactIslandsShown: boolean?,
	AreContactPointsShown: boolean?,
	AreJointCoordinatesShown: boolean?,
	AreMechanismsShown: boolean?,
	AreModelCoordsShown: boolean?,
	AreOwnersShown: boolean?,
	ArePartCoordsShown: boolean?,
	AreRegionsShown: boolean?,
	AreUnalignedPartsShown: boolean?,
	AreWorldCoordsShown: boolean?,
	DisableCSGv2: boolean?,
	IsReceiveAgeShown: boolean?,
	IsTreeShown: boolean?,
	PhysicsAnalyzerEnabled: boolean?,
	PhysicsEnvironmentalThrottle: Enum.EnviromentalPhysicsThrottle?,
	ShowDecompositionGeometry: boolean?,
	ThrottleAdjustTime: number?,
	UseCSGv2: boolean?,
	AccountAge: number?,
	AppearanceDidLoad: boolean?,
	CameraMaxZoomDistance: number?,
	CameraMinZoomDistance: number?,
	CameraMode: (Enum.CameraMode | Enum.CustomCameraMode)?,
	CanLoadCharacterAppearance: boolean?,
	Character: Model?,
	CharacterAppearance: string?,
	CharacterAppearanceId: number?,
	ChatMode: Enum.ChatMode?,
	DataComplexity: number?,
	DataComplexityLimit: number?,
	DataReady: boolean?,
	DevCameraOcclusionMode: Enum.DevCameraOcclusionMode?,
	DevComputerCameraMode: Enum.DevComputerCameraMovementMode?,
	DevComputerMovementMode: Enum.DevComputerMovementMode?,
	DevEnableMouseLock: boolean?,
	DevTouchCameraMode: Enum.DevTouchCameraMovementMode?,
	DevTouchMovementMode: Enum.DevTouchMovementMode?,
	DisplayName: string?,
	FollowUserId: number?,
	Guest: boolean?,
	MaximumSimulationRadius: number?,
	MembershipType: Enum.MembershipType?,
	ReplicationFocus: Instance?,
	RespawnLocation: SpawnLocation?,
	SimulationRadius: number?,
	Team: Team?,
	TeleportedIn: boolean?,
	UserId: number?,
	VRDevice: string?,
	userId: number?,
	CharacterAdded: ((self: T, character: Instance) -> ())?,
	CharacterAppearanceLoaded: ((self: T, character: Instance) -> ())?,
	CharacterRemoving: ((self: T, character: Instance) -> ())?,
	FriendStatusChanged: ((self: T, player: Instance, friendStatus: Enum.FriendStatus) -> ())?,
	Idled: ((self: T, time: number) -> ())?,
	OnTeleport: ((self: T, teleportState: Enum.TeleportState, placeId: number, spawnName: string) -> ())?,
	SimulationRadiusChanged: ((self: T, radius: number) -> ())?,
	ComputerCameraMovementModeRegistered: ((self: T) -> ())?,
	ComputerMovementModeRegistered: ((self: T) -> ())?,
	TouchCameraMovementModeRegistered: ((self: T) -> ())?,
	TouchMovementModeRegistered: ((self: T) -> ())?,
	BubbleChat: boolean?,
	CharacterAutoLoads: boolean?,
	ClassicChat: boolean?,
	LocalPlayer: Instance?,
	MaxPlayers: number?,
	MaxPlayersInternal: number?,
	NumPlayers: number?,
	PreferredPlayers: number?,
	PreferredPlayersInternal: number?,
	FriendRequestEvent: ((
		self: T,
		player: Instance,
		player: Instance,
		friendRequestEvent: Enum.FriendRequestEvent
	) -> ())?,
	GameAnnounce: ((self: T, message: string) -> ())?,
	PlayerAdded: ((self: T, player: Instance) -> ())?,
	PlayerChatted: ((
		self: T,
		chatType: Enum.PlayerChatType,
		player: Instance,
		message: string,
		targetPlayer: Instance
	) -> ())?,
	PlayerConnecting: ((self: T, player: Instance) -> ())?,
	PlayerDisconnecting: ((self: T, player: Instance) -> ())?,
	PlayerRejoining: ((self: T, player: Instance) -> ())?,
	PlayerRemoving: ((self: T, player: Instance) -> ())?,
	CollisionEnabled: boolean?,
	GridSize: number?,
	UsesAssetInsertionDrag: boolean?,
	Deactivation: ((self: T) -> ())?,
	ActionId: string?,
	StatusTip: string?,
	Triggered: ((self: T) -> ())?,
	PointsAwarded: ((
		self: T,
		userId: number,
		pointsAwarded: number,
		userBalanceInGame: number,
		userTotalBalance: number
	) -> ())?,
	EasingDirection: (Enum.PoseEasingDirection | Enum.EasingDirection)?,
	EasingStyle: (Enum.PoseEasingStyle | Enum.EasingStyle)?,
	MaskWeight: number?,
	Weight: number?,
	Intensity: number?,
	Threshold: number?,
	Contrast: number?,
	Saturation: number?,
	TintColor: Color3?,
	Spread: number?,
	Browsable: boolean?,
	ClassCategory: string?,
	Constraint: string?,
	Deprecated: boolean?,
	EditingDisabled: boolean?,
	IsBackend: boolean?,
	ScriptContext: string?,
	UIMaximum: number?,
	UIMinimum: number?,
	UINumTicks: number?,
	summary: string?,
	ExplorerImageIndex: number?,
	ExplorerOrder: number?,
	Insertable: boolean?,
	PreferredParent: string?,
	PreferredParents: string?,
	OnClientEvent: ((self: T, arguments: { any }) -> ())?,
	OnServerEvent: ((self: T, player: Instance, arguments: { any }) -> ())?,
	AutoFRMLevel: number?,
	EagerBulkExecution: boolean?,
	EditQualityLevel: Enum.QualityLevel?,
	ExportMergeByMaterial: boolean?,
	FrameRateManager: Enum.FramerateManagerMode?,
	GraphicsMode: Enum.GraphicsMode?,
	MeshCacheSize: number?,
	QualityLevel: (Enum.QualityLevel | number)?,
	ReloadAssets: boolean?,
	RenderCSGTrianglesDebug: boolean?,
	ShowBoundingBoxes: boolean?,
	ComparisonDiffThreshold: number?,
	ComparisonMethod: Enum.RenderingTestComparisonMethod?,
	ComparisonPsnrThreshold: number?,
	ShouldSkip: boolean?,
	DefaultLoadingGuiRemoved: ((self: T) -> ())?,
	FinishedReplicating: ((self: T) -> ())?,
	RemoveDefaultLoadingGuiSignal: ((self: T) -> ())?,
	Heartbeat: ((self: T, step: number) -> ())?,
	RenderStepped: ((self: T, step: number) -> ())?,
	Stepped: ((self: T, time: number, step: number) -> ())?,
	ScriptsDisabled: boolean?,
	Error: ((self: T, message: string, stackTrace: string, script: Instance) -> ())?,
	CurrentLine: number?,
	IsDebugging: boolean?,
	IsPaused: boolean?,
	Script: Instance?,
	BreakpointAdded: ((self: T, breakpoint: Instance) -> ())?,
	BreakpointRemoved: ((self: T, breakpoint: Instance) -> ())?,
	EncounteredBreak: ((self: T, line: number) -> ())?,
	Resuming: ((self: T) -> ())?,
	WatchAdded: ((self: T, watch: Instance) -> ())?,
	WatchRemoved: ((self: T, watch: Instance) -> ())?,
	SelectionChanged: ((self: T) -> ())?,
	Close: ((self: T) -> ())?,
	CloseLate: ((self: T) -> ())?,
	ServiceAdded: ((self: T, service: Instance) -> ())?,
	ServiceRemoving: ((self: T, service: Instance) -> ())?,
	CreatorId: number?,
	CreatorType: Enum.CreatorType?,
	GameId: number?,
	GearGenreSetting: Enum.GearGenreSetting?,
	Genre: Enum.Genre?,
	IsSFFlagsLoaded: boolean?,
	JobId: string?,
	PlaceId: number?,
	PlaceVersion: number?,
	PrivateServerId: string?,
	PrivateServerOwnerId: number?,
	Workspace: Workspace?,
	lighting: Instance?,
	workspace: Workspace?,
	AllowedGearTypeChanged: ((self: T) -> ())?,
	GraphicsQualityChangeRequest: ((self: T, betterQuality: boolean) -> ())?,
	ItemChanged: ((self: T, object: Instance, descriptor: string) -> ())?,
	Loaded: (((self: T) -> ()) | ((self: T, soundId: string) -> ()))?,
	ScreenshotReady: ((self: T, path: string) -> ())?,
	CelestialBodiesShown: boolean?,
	MoonAngularSize: number?,
	MoonTextureId: Content?,
	SkyboxBk: Content?,
	SkyboxDn: Content?,
	SkyboxFt: Content?,
	SkyboxLf: Content?,
	SkyboxRt: Content?,
	SkyboxUp: Content?,
	StarCount: number?,
	SunAngularSize: number?,
	SunTextureId: Content?,
	Opacity: number?,
	RiseVelocity: number?,
	EmitterSize: number?,
	MinDistance: number?,
	Pitch: number?,
	PlayOnRemove: boolean?,
	PlaybackLoudness: number?,
	PlaybackSpeed: number?,
	Playing: boolean?,
	RollOffMode: Enum.RollOffMode?,
	SoundGroup: SoundGroup?,
	SoundId: Content?,
	TimeLength: number?,
	Volume: number?,
	isPlaying: boolean?,
	Ended: ((self: T, soundId: string) -> ())?,
	Paused: ((self: T, soundId: string) -> ())?,
	Played: ((self: T, soundId: string) -> ())?,
	Resumed: ((self: T, soundId: string) -> ())?,
	Depth: number?,
	Mix: number?,
	Attack: number?,
	GainMakeup: number?,
	Ratio: number?,
	Release: number?,
	SideChain: Instance?,
	Level: number?,
	Delay: number?,
	DryLevel: number?,
	Feedback: number?,
	WetLevel: number?,
	HighGain: number?,
	LowGain: number?,
	MidGain: number?,
	Octave: number?,
	DecayTime: number?,
	Density: number?,
	Diffusion: number?,
	Duty: number?,
	Frequency: number?,
	AmbientReverb: Enum.ReverbType?,
	DistanceFactor: number?,
	DopplerScale: number?,
	RespectFilteringEnabled: boolean?,
	RolloffScale: number?,
	SparkleColor: Color3?,
	DevComputerCameraMovementMode: Enum.DevComputerCameraMovementMode?,
	DevTouchCameraMovementMode: Enum.DevTouchCameraMovementMode?,
	EnableMouseLockOption: boolean?,
	LoadCharacterAppearance: boolean?,
	ContactsCount: number?,
	DataReceiveKbps: number?,
	DataSendKbps: number?,
	HeartbeatTimeMs: number?,
	MovingPrimitivesCount: number?,
	PhysicsReceiveKbps: number?,
	PhysicsSendKbps: number?,
	PhysicsStepTimeMs: number?,
	PrimitivesCount: number?,
	SchedulerDutyCycle: number?,
	SchedulerRate: number?,
	ThreadPoolConfig: Enum.ThreadPoolConfig?,
	ThreadPoolSize: number?,
	AutoAssignable: boolean?,
	AutoColorCharacters: boolean?,
	Score: number?,
	PlayerRemoved: ((self: T, player: Instance) -> ())?,
	CustomizedTeleportUI: boolean?,
	LocalPlayerArrivedFromTeleport: ((self: T, loadingGui: Instance, dataTable: { any }) -> ())?,
	TeleportInitFailed: ((self: T, player: Instance, teleportResult: Enum.TeleportResult, errorMessage: string) -> ())?,
	SizeInCells: Vector3?,
	AutoRuns: boolean?,
	ErrorCount: number?,
	ExecuteWithStudioRun: boolean?,
	Is30FpsThrottleEnabled: boolean?,
	IsPhysicsEnvironmentalThrottled: boolean?,
	IsSleepAllowed: boolean?,
	NumberOfPlayers: number?,
	SimulateSecondsLag: number?,
	TestCount: number?,
	Timeout: number?,
	WarnCount: number?,
	ServerCollectConditionalResult: ((self: T, condition: boolean, text: string, script: Instance, line: number) -> ())?,
	ServerCollectResult: ((self: T, text: string, script: Instance, line: number) -> ())?,
	ActiveGamepadAdded: ((self: T) -> ())?,
	ActiveGamepadRemoved: ((self: T) -> ())?,
	ActiveUserSignedOut: ((self: T, signOutStatus: number) -> ())?,
	WidthScale: NumberSequence?,
	LocaleId: string?,
	PlaybackState: Enum.PlaybackState?,
	Completed: ((self: T, playbackState: Enum.PlaybackState) -> ())?,
	Instance: Instance?,
	TweenInfo: TweenInfo?,
	AspectRatio: number?,
	AspectType: Enum.AspectType?,
	DominantAxis: Enum.DominantAxis?,
	MaxSize: Vector2?,
	MinSize: Vector2?,
	MaxTextSize: number?,
	MinTextSize: number?,
	AbsoluteContentSize: Vector2?,
	FillDirection: Enum.FillDirection?,
	HorizontalAlignment: Enum.HorizontalAlignment?,
	SortOrder: Enum.SortOrder?,
	VerticalAlignment: Enum.VerticalAlignment?,
	CellPadding: UDim2?,
	CellSize: UDim2?,
	FillDirectionMaxCells: number?,
	StartCorner: Enum.StartCorner?,
	Padding: (UDim | UDim2)?,
	Animated: boolean?,
	Circular: boolean?,
	CurrentPage: GuiObject?,
	GamepadInputEnabled: boolean?,
	ScrollWheelInputEnabled: boolean?,
	TouchInputEnabled: boolean?,
	TweenTime: number?,
	PageEnter: ((self: T, page: Instance) -> ())?,
	PageLeave: ((self: T, page: Instance) -> ())?,
	FillEmptySpaceColumns: boolean?,
	FillEmptySpaceRows: boolean?,
	MajorAxis: Enum.TableMajorAxis?,
	PaddingBottom: UDim?,
	PaddingLeft: UDim?,
	PaddingRight: UDim?,
	PaddingTop: UDim?,
	AllTutorialsDisabled: boolean?,
	ChatVisible: boolean?,
	ComputerCameraMovementMode: Enum.ComputerCameraMovementMode?,
	ComputerMovementMode: Enum.ComputerMovementMode?,
	ControlMode: Enum.ControlMode?,
	Fullscreen: boolean?,
	GamepadCameraSensitivity: number?,
	HasEverUsedVR: boolean?,
	MasterVolume: number?,
	MouseSensitivity: number?,
	OnboardingsCompleted: string?,
	RotationType: Enum.RotationType?,
	SavedQualityLevel: Enum.SavedQualitySetting?,
	TouchCameraMovementMode: Enum.TouchCameraMovementMode?,
	TouchMovementMode: Enum.TouchMovementMode?,
	UsedCoreGuiIsVisibleToggle: boolean?,
	UsedCustomGuiIsVisibleToggle: boolean?,
	UsedHideHudShortcut: boolean?,
	VREnabled: boolean?,
	VRRotationIntensity: number?,
	FullscreenChanged: ((self: T, isFullscreen: boolean) -> ())?,
	PerformanceStatsVisibleChanged: ((self: T, isPerformanceStatsVisible: boolean) -> ())?,
	StudioModeChanged: ((self: T, isStudioMode: boolean) -> ())?,
	AccelerometerEnabled: boolean?,
	BottomBarSize: Vector2?,
	GamepadEnabled: boolean?,
	GyroscopeEnabled: boolean?,
	KeyboardEnabled: boolean?,
	LegacyInputEventsEnabled: boolean?,
	ModalEnabled: boolean?,
	MouseBehavior: Enum.MouseBehavior?,
	MouseDeltaSensitivity: number?,
	MouseEnabled: boolean?,
	MouseIconEnabled: boolean?,
	NavBarSize: Vector2?,
	OnScreenKeyboardAnimationDuration: number?,
	OnScreenKeyboardPosition: Vector2?,
	OnScreenKeyboardSize: Vector2?,
	OnScreenKeyboardVisible: boolean?,
	OverrideMouseIconBehavior: Enum.OverrideMouseIconBehavior?,
	StatusBarSize: Vector2?,
	TouchEnabled: boolean?,
	UserHeadCFrame: CFrame?,
	DeviceAccelerationChanged: ((self: T, acceleration: Instance) -> ())?,
	DeviceGravityChanged: ((self: T, gravity: Instance) -> ())?,
	DeviceRotationChanged: ((self: T, rotation: Instance, cframe: CFrame) -> ())?,
	GamepadConnected: ((self: T, gamepadNum: Enum.UserInputType) -> ())?,
	GamepadDisconnected: ((self: T, gamepadNum: Enum.UserInputType) -> ())?,
	JumpRequest: ((self: T) -> ())?,
	LastInputTypeChanged: ((self: T, lastInputType: Enum.UserInputType) -> ())?,
	StatusBarTapped: ((self: T, position: Vector2) -> ())?,
	TextBoxFocusReleased: ((self: T, textboxReleased: Instance) -> ())?,
	TextBoxFocused: ((self: T, textboxFocused: Instance) -> ())?,
	TouchMoved: ((self: T, touch: Instance, gameProcessedEvent: boolean) -> ())?,
	TouchStarted: ((self: T, touch: Instance, gameProcessedEvent: boolean) -> ())?,
	TouchTapInWorld: ((self: T, position: Vector2, processedByUI: boolean) -> ())?,
	UserCFrameChanged: ((self: T, type: Enum.UserCFrame, value: CFrame) -> ())?,
	GuiInputUserCFrame: Enum.UserCFrame?,
	VRDeviceName: string?,
	NavigationRequested: ((self: T, cframe: CFrame, inputUserCFrame: Enum.UserCFrame) -> ())?,
	TouchpadModeChanged: ((self: T, pad: Enum.VRTouchpad, mode: Enum.VRTouchpadMode) -> ())?,
	UserCFrameEnabled: ((self: T, type: Enum.UserCFrame, enabled: boolean) -> ())?,
	Value: (boolean | BrickColor | CFrame | Color3 | number | Instance | Ray | string | Vector3)?,
	changed: (
		((self: T, value: boolean) -> ())
		| ((self: T, value: BrickColor) -> ())
		| ((self: T, value: CFrame) -> ())
		| ((self: T, value: Color3) -> ())
		| ((self: T, value: number) -> ())
		| ((self: T, value: Instance) -> ())
		| ((self: T, value: Ray) -> ())
		| ((self: T, value: string) -> ())
		| ((self: T, value: Vector3) -> ())
	)?,
	MaxValue: number?,
	MinValue: number?,
	AdditionalLuaState: string?,
	PlaybackCompleted: ((self: T, additionalLuaState: string) -> ())?,
	RecordingCompleted: ((self: T, result: string) -> ())?,
}

return 0
